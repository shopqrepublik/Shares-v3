import os
import pandas as pd
import yfinance as yf
import psycopg2
import requests
from datetime import datetime

# üîë API Keys
FMP_API_KEY = os.getenv("FMP_API_KEY")

# üìÇ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")

# === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ò–ö–ï–†–û–í ===
def normalize_symbol(symbol: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ–¥ Yahoo Finance"""
    if symbol.endswith(".B"):
        return symbol.replace(".B", "-B")  # BRK-B –≤–º–µ—Å—Ç–æ BRK.B
    return symbol.strip()

# === FMP API ===
def get_price_from_fmp(symbol: str):
    try:
        url = f"https://financialmodelingprep.com/api/v3/quote/{symbol}?apikey={FMP_API_KEY}"
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            data = r.json()
            if data and "price" in data[0]:
                return data[0]["price"]
    except Exception as e:
        print(f"[FMP] –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
    return None

# === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î ===
def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# === –°–û–ó–î–ê–ù–ò–ï –ü–û–†–¢–§–ï–õ–Ø ===
def build_portfolio(tickers, risk_profile="Balanced"):
    portfolio = []

    for symbol in tickers:
        norm_sym = normalize_symbol(symbol)
        price = None
        momentum = None

        try:
            # --- 1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ yfinance
            data = yf.download(norm_sym, period="6mo", progress=False)
            if data.empty:
                raise ValueError("Yahoo –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            price = float(data["Close"].iloc[-1])
            momentum = (price / data["Close"].iloc[0]) - 1

        except Exception as e:
            print(f"[YF] –û—à–∏–±–∫–∞ –¥–ª—è {norm_sym}: {e}, –ø—Ä–æ–±—É—é FMP...")
            price = get_price_from_fmp(norm_sym)

        if price is None:
            print(f"[‚ùå] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {norm_sym}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            continue

        portfolio.append({
            "symbol": norm_sym,
            "price": price,
            "momentum": momentum if momentum else 0.0,
            "weight": 1 / len(tickers),  # ‚öñÔ∏è —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞
            "pattern": None,
            "updated_at": datetime.utcnow()
        })

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î ---
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("DELETE FROM portfolio_holdings;")  # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å

    for row in portfolio:
        cur.execute(
            """
            INSERT INTO portfolio_holdings (symbol, price, momentum, weight, pattern, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            """,
            (row["symbol"], row["price"], row["momentum"], row["weight"], row["pattern"], row["updated_at"])
        )

    conn.commit()
    cur.close()
    conn.close()

    print(f"[‚úÖ] –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(portfolio)} —Ç–∏–∫–µ—Ä–æ–≤")
    return portfolio


if __name__ == "__main__":
    # ‚ö° –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    tickers = ["AAPL", "MSFT", "GOOGL", "AMZN", "BRK-B"]
    build_portfolio(tickers)
